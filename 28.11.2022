Zadanie 1

Należy ze zbioru liczb wybrać liczby które występują unikalnie (nie powtarzają się)

-zrozumieć pytanie
-należy wymyślić przykłady do zadań (randomowe, nie po koleji)
1. pozytywny
8 5 1 5 3 1 7 4
- sprawdź czy przykład jest kompletny (nie za mało, nie za dużo parametrów, czy jest wszystko co potrzeba (nie tylko o ilość np ilość cyfr w wektorze))
-sformalizowanie parametru 
1. ile jest parametrów
2. jaki parametr
3. nazwa parametru
- sformalizowanie przykładu
-nagłówek funkcji
- nie wiesz co pisać wróć do przykładu


#include <iostream>
#include <vector>

using namespace std;



void wypisz(vector<int>tab) {
    for (int i = 0; i < tab.size(); i++) {
        cout << tab[i] << ", ";
    }
    cout << endl;
}

int max(vector<int>tab) {
    int wynik = tab[0];
    for (int i = 1; i < tab.size(); i++) {
        if (tab[i] > wynik) {
            wynik = tab[i];
        }
    }
    return wynik;
}

bool czyNalezy(vector<int>tab, int element) {
    for (int i = 0; i < tab.size(); i++) {
        if (tab[i] == element) {
            return true;
        }
    }
    return false;
}

bool czyZawiera(vector<int>tab1, vector<int>tab2) {
    for (int i = 0; i < tab2.size(); i++) {
        if (!czyNalezy(tab1, tab2[i])) {
            return false;
        }
    }
    return true;

}

vector<int> unikalnosc(vector<int>tab) 
{
    vector<int>wynik;

    for (int i = 0; i < tab.size(); i++) {
        if (!czyNalezy(wynik, tab[i])) {
            wynik.push_back(tab[i]);
        }
    }

    return wynik;
}


int main()
{
    vector<int>tab1 = {7, 4, 1, 3, 8, 2};
    vector<int>tab2 = {2, 4, 7};
    int element = 1;

    
    wypisz(tab1);
    wypisz(tab2);
    cout << element << endl;
    cout << max(tab1) << endl;
    cout << "czy element należy do wektora 1: " << czyNalezy(tab1, element) << endl;
    cout << "czy wektor 1 nalezy do wektora 2: " << czyZawiera(tab1, tab2) << endl;
    
     vector<int>tab3 = {8, 5, 1, 5, 3 ,1, 7, 4};

    vector<int>tabu = unikalnosc(tab3);


    wypisz(tabu);

    
    
    return 0;
}
